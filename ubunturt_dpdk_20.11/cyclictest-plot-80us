#!/usr/bin/python3
# flake8: noqa
# Copyright (c) 2021 VMware, Inc. All rights reserved.


import sys
import matplotlib as mpl
mpl.use('Agg')
from matplotlib import rcParams
rcParams['font.family'] = 'monospace'
rcParams.update({'font.size': 14})
import matplotlib.pyplot as plt

filepath = sys.argv[1]

# global dictionary
dataMap = {}

totalOverflows = 0
maxLatency = 0
with open(filepath) as fp:
   for line in fp:
      entries = line.split()
      if len(entries) == 0:
         continue

      # Check for overflows that will throw the percentile off.
      if len(entries) > 3 and entries[0] == '#' and entries[1] == 'Histogram' and entries[2] == 'Overflows:':
         for entry in entries[3:]:
            totalOverflows += int(entry)

      # Grab the max
      if len(entries) > 3 and entries[0] == '#' and entries[1] == 'Max' and entries[2] == 'Latencies:':
         for entry in entries[3:]:
            if int(entry) > maxLatency:
               maxLatency = int(entry)

      # Skip all other lines that begin with #
      if entries[0] == '#':
         continue

      # Left with just the histogram data
      latency = int(entries[0])
      numElements = 0
      for entry in entries[1:]:
         numElements += int(entry)
      dataMap[latency] = numElements

aboveOneHundred = 0
for key in dataMap.keys():
    if key >= 100:
       aboveOneHundred += dataMap[key]

print("Total samples >= 100us: %d" % (aboveOneHundred))
if totalOverflows > 0:
   print("\nWarning: %d histogram overflows detected, they are not counted in the percentile!" % (totalOverflows))
   print("Please raise cyclictest -h argument to above the max latency of %d to get accurate percentiles.\n" % (maxLatency))

totalSamples = sum(dataMap.values())

pct9 = totalSamples * (100 - 0.1) / 100
pct99 = totalSamples * (100 - 0.01) / 100
pct999 = totalSamples * (100 - 0.001) / 100
pct9999 = totalSamples * (100 - 0.0001) / 100
pct99999 = totalSamples * (100 - 0.00001) / 100

pctLat9 = 0
pctLat99 = 0
pctLat999 = 0
pctLat9999 = 0
pctLat99999 = 0

currTotal = 0
maxLat = 0
totalLatency = 0
for key in sorted (dataMap.keys()):
   totalLatency += key * dataMap[key]
   currTotal += dataMap[key]

   if currTotal >= pct9 and pctLat9 == 0:
      pctLat9 = key
   if currTotal >= pct99 and pctLat99 == 0:
      pctLat99 = key
   if currTotal >= pct999 and pctLat999 == 0:
      pctLat999 = key
   if currTotal >= pct9999 and pctLat9999 == 0:
      pctLat9999 = key
   if currTotal >= pct99999 and pctLat99999 == 0:
      pctLat99999 = key

   if key > maxLat and dataMap[key] != 0:
      maxLat = key

globalAverage = totalLatency / (totalSamples * 1.0)

# Remove any histogram entries at the top that don't have any samples.
keys = sorted(dataMap.keys(), reverse=True)
for key in keys:
   if dataMap[key] == 0:
      del dataMap[key]
   else:
      break

xLabel = "Latency (us)\n\nAverage latency from histogram (us): %f\n%20s%10s%10s%10s%10s%10s%10s\n%20s%10d%10d%10d%10d%10d%10d" % (globalAverage, "Percentile:", '99.9', '99.99', '99.999', '99.9999', '99.99999', 'max', "Latency (us):", pctLat9, pctLat99, pctLat999, pctLat9999, pctLat99999, maxLat)

print(xLabel)

plt.figure(figsize=(20,10))
plt.bar(list(dataMap.keys()), dataMap.values(), color='g')
plt.grid(axis='y', alpha=0.75)
plt.xlabel(xLabel)
plt.ylabel('Samples (logarithmic scale)')
plt.yscale("log")
# HACK: Always plot to 80us for easy comparison
maxLat = 80
plt.xticks(range(0,maxLat+4, 10))
plt.title(filepath)
plt.subplots_adjust(bottom=0.25, top=0.75)
plt.savefig('%s-plot.png' % (filepath), bbox_inches="tight")
