#!/usr/bin/env python3
# pylint: disable=no-value-for-parameter

# Copyright (c) 2021 VMware, Inc. All rights reserved.

import pathlib

import click
import hdrh.histogram

MAX_LATENCY_US = 1000 * 100 # This should fit even non-RT latencies
SIG_FIGS = 2 # significant figures for precision
OVERFLOW_PREFIX = "# Histogram Overflows: "
MAX_LATENCY_PREFIX = "# Max Latencies: "
SCALING_RATIO = 1
TICKS_PER_HALF_DISTANCE = 16 # Raise the plot resolution a bit

@click.command()
@click.argument("histogram-file", type=click.File("r"))
@click.argument(
    "percentile-file",
     type=click.File("w"), required=False)
@click.option("--extrapolate-overflows", is_flag=True, default=False)
def run(histogram_file, percentile_file, extrapolate_overflows):
    """Converts cyclictest histogram to HDR percentile format for plotting

    PERCENTILE_FILE [default: <HISTOGRAM_FILE>.hgrm]

    Obviously due to garbage in garbage out, we cannot bring back the
    high latency values already clipped at the high end unless cyclictest
    start producing HDR histograms natively. We'll just synthesize data
    points at max to visualize the overflow.

    The purpose of this tool is just to make the format compatible so you
    can use HDR histogram's plotting tools to produce a latency chart.
    See http://hdrhistogram.org/ for details.

    Web plotter: https://hdrhistogram.github.io/HdrHistogram/plotFiles.html
    Python plotter: https://pypi.org/project/hdr-plot/

    The Python plotter hdr-plot is included in the docker image for your
    convenience.
    """

    if not percentile_file:
        percentile_filename = pathlib.Path(
            histogram_file.name).with_suffix(".hgrm")
        percentile_file = open(percentile_filename, "wb")


    hdr_histogram = hdrh.histogram.HdrHistogram(1, MAX_LATENCY_US, SIG_FIGS)

    # FIXME: Just parsing line by line. Switch to TextFSM later
    # to make this more sturdy.
    max_latency = 0
    for line in histogram_file:
        # Skip comments. But pick up useful info from it.
        if line.startswith("#"):
            if line.startswith(MAX_LATENCY_PREFIX):
                latencies = line[len(MAX_LATENCY_PREFIX):].split()
                for latency in latencies:
                    latency = int(latency)
                    if latency > max_latency:
                        max_latency = latency
            elif line.startswith(OVERFLOW_PREFIX):
                overflows = line[len(OVERFLOW_PREFIX):].split()
                overflows = [int(overflow) for overflow in overflows]
                if max(overflows) > 0:
                    click.secho("Warning: ", fg="yellow", bold=True, nl=False)
                    click.echo(
                        "Overflow detected. Consider re-running cyclictest with "
                        f"a -h value higher than max latency of {max_latency} "
                        "for accurate plots.")
                    if extrapolate_overflows:
                        click.secho("Warning: ", fg="yellow", bold=True, nl=False)
                        click.echo(
                            "Your plot will be clipped at max latency. If "
                            "there are too many clipped samples there may not "
                            "be any pixels left to display normal samples. "
                            "And the max latency values could be so high "
                            "the normal samples are too small to see.")
                        counts = line[len(OVERFLOW_PREFIX):].split()
                        for count in counts:
                            hdr_histogram.record_value(max_latency + 1, int(count))
                    else:
                        click.echo("Overflow samples ignored.")

            continue

        entries = line.split()
        if len(entries) < 2:
            # A valid row should have at least the latency and 1 value
            continue

        latency = int(entries[0])
        for count in entries[1:]:
            hdr_histogram.record_value(latency, int(count))

    hdr_histogram.output_percentile_distribution(
        percentile_file, SCALING_RATIO, TICKS_PER_HALF_DISTANCE)
    print(f"Percentiles written to {percentile_file.name} for plotting.")


if __name__ == '__main__':
    run()
